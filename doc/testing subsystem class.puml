@startuml
'https://plantuml.com/class-diagram

class MainWindow {
    - Ui::MainWindow * ui

    + MainWindow(QWidget *)
    + ~MainWindow() override

    - void displayHelloText()
    - void on_theoryButton_clicked()
    - void on_demoButton_clicked()
    - void on_testingButton_clicked()
}

class TestingSystem {
	- Ui::TestingSystem * ui
	- WelcomeToTesting * welcomeToTestingWidget
	- Testing * testingWidget
	- StatWidget * statWidget
	- QDialog * testingRulesDialog
    - QDialog * editQuestionRulesDialog
	- std::shared_ptr<Stat> stat

	+ TestingSystem(QWidget *)
	+ ~TestingSystem() override
	- void formTestingRulesDialog()
    - void formEditQuestionsRulesDialog()
	- void on_openSettingsMenu_triggered()
	- void on_statMenu_triggered()
	- void startTest(const QString & username)
	- void saveStat()
	- void showStat()
	- void showTestingRules()
    - void showEditQuestionsRules()
}
MainWindow -- TestingSystem

class QuestionWidget {
	- Ui::QuestionWidget * ui
	- QTextBrowser * questionTextBrowser
	- shared_ptr<Question> question
	- vector<QCheckBox *> answersCheckBoxes
	- void formAnswers()

	+ QuestionWidget(shared_ptr<Question>, QWidget *, QTextBrowser *)
	+ ~QuestionWidget() override
	+ void Display()
	+ int RateAnswer()
	+ shared_ptr<Question> GetQuestion()
}
Testing "1" *-- "..." QuestionWidget

enum Complexity {
    simple
    medium
    hard
}
class Question {
	- QString question
	- Complexity complexity
	- vector<QString> answers
	- set<int> correctAnswers

	+ Question()
	+ Question(QString, std::vector<QString>, std::set<int>, Complexity)
	+ Question(QJsonObject)
	+ int RateAnswer(std::set<int>) const noexcept
	+ QString GetQuestion() const noexcept
	+ vector<QString> GetAnswers() const noexcept
	+ Complexity GetComplexity() const noexcept
}
Question *- Complexity
QuestionWidget o- Question

class StatWidget {
    - Ui::StatWidget * ui
	- shared_ptr<Stat> stat
	- void closed()

	+ StatWidget(shared_ptr<Stat>, QWidget *)
	+ ~StatWidget() override
	- void closeEvent(QCloseEvent *) override
}
TestingSystem o-- StatWidget

class StatViewWidget {
	- Ui::StatViewWidget * ui
	- QSqlDatabase * db
	- QSqlTableModel * model

	+ StatViewWidget(QString, QWidget *)
	+ ~StatViewWidget() override
	- void setVisibleUsernameFields(bool)
	- void setVisibleTestingPeriodFields(bool)
	- void setVisibleTestingDurationFields(bool)
	- void setVisiblePercentFields(bool)
	- void on_showButton_clicked()
	- void on_clearFilterButton_clicked()
	- void changeParametersFields(QString)
}
TestingSystem <-- StatViewWidget

class StatError {
    + StatError(std::string)
}
Error <|-left- StatError
Stat +-- StatError

class Stat {
	- QString username
	- QDateTime startTime
	- QDateTime finishTime
	- int userRate
	- int maxRate
	- std::vector<pair<shared_ptr<Question>, int>> questionsRate

	+ Stat(QString)
	+ void AddQuestionRate(shared_ptr<Question>, int) noexcept
	+ void Save(QString)
	+ QString ToString() const
	+ void SetStartTime(QDateTime)
	+ void SetFinishTime(QDateTime)
	- static QTime duration(QDateTime, QDateTime) noexcept
}
TestingSystem o-- Stat

class WelcomeToTesting {
	- Ui::WelcomeToTesting * ui

	+ WelcomeToTesting(QWidget *)
	+ ~WelcomeToTesting() override
	- void closeEvent(QCloseEvent *) override
	- void closed(QString username)
	- void testingRulesButtonClicked()
	- void on_startTestingButton_clicked()
	- void on_usernameLineEdit_textChanged()
	- void on_showTestingRulesButton_clicked()
}
TestingSystem o-- WelcomeToTesting

class TestingSettingsWindow {
	- Ui::TestingSettingsWindow * ui

	+ TestingSettingsWindow(QWidget *)
	+ ~TestingSettingsWindow() override
	- void on_changeQuestionsSourceButton_clicked()
	- void on_saveButton_clicked()
}
TestingSystem <- TestingSettingsWindow

class Testing {
	- Ui::Testing * ui
	- int currentQuestion
	- int amountOfQuestions
	- vector<shared_ptr<QuestionWidget>> questions
	- shared_ptr<Stat> stat

    + Testing(std::shared_ptr<Stat>, QWidget *)
    + ~Testing() override

	- void readQuestions()
	- void displayCurrentQuestion()
	- void closeEvent(QCloseEvent *) override
	- void closed()
	- void on_answerButton_clicked()
}
TestingSystem o-- Testing

@enduml